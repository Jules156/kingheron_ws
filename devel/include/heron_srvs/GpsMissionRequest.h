// Generated by gencpp from file heron_srvs/GpsMissionRequest.msg
// DO NOT EDIT!


#ifndef HERON_SRVS_MESSAGE_GPSMISSIONREQUEST_H
#define HERON_SRVS_MESSAGE_GPSMISSIONREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace heron_srvs
{
template <class ContainerAllocator>
struct GpsMissionRequest_
{
  typedef GpsMissionRequest_<ContainerAllocator> Type;

  GpsMissionRequest_()
    : gps_x(0.0)
    , gps_y(0.0)
    , vel(0.0)  {
    }
  GpsMissionRequest_(const ContainerAllocator& _alloc)
    : gps_x(0.0)
    , gps_y(0.0)
    , vel(0.0)  {
  (void)_alloc;
    }



   typedef float _gps_x_type;
  _gps_x_type gps_x;

   typedef float _gps_y_type;
  _gps_y_type gps_y;

   typedef float _vel_type;
  _vel_type vel;





  typedef boost::shared_ptr< ::heron_srvs::GpsMissionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::heron_srvs::GpsMissionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GpsMissionRequest_

typedef ::heron_srvs::GpsMissionRequest_<std::allocator<void> > GpsMissionRequest;

typedef boost::shared_ptr< ::heron_srvs::GpsMissionRequest > GpsMissionRequestPtr;
typedef boost::shared_ptr< ::heron_srvs::GpsMissionRequest const> GpsMissionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::heron_srvs::GpsMissionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::heron_srvs::GpsMissionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::heron_srvs::GpsMissionRequest_<ContainerAllocator1> & lhs, const ::heron_srvs::GpsMissionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.gps_x == rhs.gps_x &&
    lhs.gps_y == rhs.gps_y &&
    lhs.vel == rhs.vel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::heron_srvs::GpsMissionRequest_<ContainerAllocator1> & lhs, const ::heron_srvs::GpsMissionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace heron_srvs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::heron_srvs::GpsMissionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::heron_srvs::GpsMissionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::heron_srvs::GpsMissionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::heron_srvs::GpsMissionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::heron_srvs::GpsMissionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::heron_srvs::GpsMissionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::heron_srvs::GpsMissionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4d853c08e41f71ed018043f1bc42f7ea";
  }

  static const char* value(const ::heron_srvs::GpsMissionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4d853c08e41f71edULL;
  static const uint64_t static_value2 = 0x018043f1bc42f7eaULL;
};

template<class ContainerAllocator>
struct DataType< ::heron_srvs::GpsMissionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "heron_srvs/GpsMissionRequest";
  }

  static const char* value(const ::heron_srvs::GpsMissionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::heron_srvs::GpsMissionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 gps_x\n"
"float32 gps_y\n"
"float32 vel\n"
;
  }

  static const char* value(const ::heron_srvs::GpsMissionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::heron_srvs::GpsMissionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gps_x);
      stream.next(m.gps_y);
      stream.next(m.vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GpsMissionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::heron_srvs::GpsMissionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::heron_srvs::GpsMissionRequest_<ContainerAllocator>& v)
  {
    s << indent << "gps_x: ";
    Printer<float>::stream(s, indent + "  ", v.gps_x);
    s << indent << "gps_y: ";
    Printer<float>::stream(s, indent + "  ", v.gps_y);
    s << indent << "vel: ";
    Printer<float>::stream(s, indent + "  ", v.vel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HERON_SRVS_MESSAGE_GPSMISSIONREQUEST_H
